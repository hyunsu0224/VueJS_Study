1.1  WEB의 기초지식
    1.1.1 HTTP, HTTPS프로토콜
        설명
            HTTP의 콘텐츠 작성이나, 사이트 전반의 설계를 진행하기 위해 필요한 HTTP또는 HTTPS프로토콜에 관한 지식을 안다.
            또한, 브라우저에서 접속할때 되돌아오는 에러 코드의 의미를 이해하고, 문제를 해결하는 힌트가 된다.
        
        주요한 지식 범위
            ・브라우저와 웹 서버 사이에서 발생하는 통신내용과 순서
            ・HTTP 요청에서의 메소드의 종류와 차이점
            ・HTTP 프로토콜버전의 다른점
            ・요첨URL의 사용 형식이나 이용가능문자
            ・웹 서버가 반환하는 응답의 헤더 항목
            ・웹 서버가 반환하는 응답의 스테이터스 코드
            ・HTTP프로토콜의 계정이 있는 경우의 인증 방식
        
        중요한 기술 요소
            ・HTTP, HTTPS, SSL/TLS
            ・요청메소드(GET, POST, HEAD, PUT, DELETE 등)
                ➡ GET：특정 리소스의 표시를 요청한다, 데이터를 받기만 한다.
                ➡ HEAD：GET 메소드의 요청과 동일한 응답을 요구하지만, 응답 본문을 포함하지 않는다.
                ➡ POST：특정 리소스에 entity(개체)를 제출할 때 쓰인다.
                ➡ PUT：목적 리소스 모든 현재 표시를 요청 payload로 바꾼다.
                ➡ DELETE：특정 리소스를 삭제한다.
                ➡ CONNECT：목적 리소스로 식별되는 서버로의 터널을 맺는다.
                ➡ OPTIONS：목적 리소스의 통신을 설정하는데 쓰인다.
                ➡ TRACE：메시지 바디는 서버에서 수신한 요청 메시지를 포함하고 있다. 목적 리소스의 경로를 따라 메시지 loop-back 테스트를 한다. 되돌려 보낸다는 뜻
                ➡ PATCH：리소스의 부분만을 수정하는데 사용된다.
            ・HTTP/1.1 , HTTP/2
            ・URI(Uniform Resource Identifier)
             ➡　자원의 위치뿐만 아니라 자원에 대한 고유 식별자로서 URL의 의미를 포함한다.
             ➡　통합 자원 식별자로 인터넷에 있는 자원을 나타내는 유일한 주소(자원을 구별하기 위해 파라미터처럼 추가되는 것을 URI라고 생각하자)
             ➡　URI가 URL의 상위 개념
            ・URL(Uniform Resource Locator) ➡　자원이 실제로 존재하는 위치를 가리킨다.(그냥 형식적인 틀로써 최초 접근은 URL일지라도 로그인등 각종 이벤트가 있으면 URI로 구별을 한다.)
            예문) https://example.com의 경우 https://example.com이라는 서버를 나타내기 때문에 URL이면서 URI
                https://example.com/skin의 경우 example 서버의 skin이라는 인터넷상의 자원의 우치를 의미하기에 URL 이면서 URI
                https://example.com/one/two/abc.html 역시 URL이면서 URI
                https://example.com/123의 경우는 조금 다르다 여기서 URL은 123 앞에까지이고, 내가 원하는 정보에 도달하기 위해 123이라는 식별자가 존재하는것. 즉 URI지만 URL은 아닌것
                https://example.com/one?id=123의 경우도 마찬가지로 URL은 https://example.com/one까지이고 내가 원하는 정보까지 도달을 위해 ?id=123이라는 식별자가 있으므로 URI이지만 URL은 아니다.

            ・status code(상태 코드, 에러코드)
             ➡ 100(임시적인 응답의 상태는 괜찮은 것, 계속해도 괜찮음)
             ➡ 101(클라이언트가 보낸 내용이 요청 헤더에 대한 응답이 들어가며 서버에서 프로토콜을 변경할 것임을 알려주는것)
             ➡ 102(서버가 요청을 수신하였으며 이를 처리하고있지만, 제대로된 응답을 알려줄 수 없다는 뜻)
             ➡ 103(링크 헤더와 함께 사용되어 서버가 응답을 준비하는 동안 사용자 에이전트가 사전 로딩을 시작할 수 있도록 한다.)
            
             ➡ 200(요청이 성공적으로 된 상태) 요청메소드를 같이 보도록 하자
             ➡ 201(요청이 성공, 새로운 리소스가 생성된다, 일반적으로 POST요청 또는 일부 PUT 요청 이후에 뜬다.)
             ➡ 202(요청을 수신하였지만 행동이 되지않음, 요청 처리에 대한 결과를 이후에 HTTP로 비동기 응답을 보내는 것에 대해 명확하게 명시하지 않습니다.)
             ➡ 203(Non-Authoritative Information, 돌려받은 메타 정보 세트가 오리진 서버의 것과 일치하지 않지만 로컬이나 서드 파티 복사본에서 모아졌음을 의미한다. 이러한 조건의 경우 이 응답이 아니라 200 코드가 반드시 우선이 된다.)
             ➡ 204(No Content, 보내줄 수 있는 콘텐츠가 없지만, 헤더는 의미있을 수 있다, 사용자- 에이전트는 리소스가 캐시가 된 헤더를 새로운 것에 업데이트 하는 것이 가능하다.)
             ➡ 205(Reset Content, 요청을 완수한 이후에 사용자 에이전트에게 이 요청을 보낸 문서 뷰를 리셋하라고 알려주는 것)
             ➡ 206(클라이언트에서 복수의 스트림을 분할 다운로드 하고자 범위 헤더를 전송했기 때문에 사용된다.)
             ➡ 207(멀티 - 상태 응답은 여러 리소스가 여러 상태 코드인 상황이 적절한 경우에 해당되는 정보를 전달합니다.)
             
             ➡ 300(Multiple Choice, 요청에 대해서 하나 이상의 응답이 가능하다, 사용자-에이전트 또는 사용자는 그 중에 반드시 하나를 선택해야한다.)
             ➡ 301(Moved Permanently, 요청한 리소스의 URI가 변경되었음을 의미한다.)
             ➡ 302(Found, 요청한 리소스의 URI가 일시적으로 변경되었음을 의미한다. 새롭게 변경된 URI는 나중에 만들어 질수도 있다.)
             ➡ 303(See Other, 클라이언트가 요청한 리소스를 다른 URI에서 GET 요청을 통해 얻어야할 때, 서버가 클라이언트로 직접 보내는 응답이다.)
             ➡ 304(Not Modified, 캐시를 목적으로 사용된다. 클라이언트에게 응답이 수정되지 않았음을 알려주며, 응답받은 캐시를 그대로 사용가능하다.)
             ➡ 307(Temporary Redirect, 클라이언트가 요청한 리소스가 다른 URI에 있으며, 이전 요청과 동일한 메소드를 사용하여 요청해야할 때, 서버가 클라이언트에게
             이 응답을 직접 보낸다, 이것은 302Found 응답 코드와 동일한 의미를 가지고 있으며, 사용자 에이전트가 반드시 사용된 HTTP 메소드를 변경하지 
             말아야 한다는 점만 다르다. 만약 첫 요청에 POST가 사용되었다면, 두번 째 요청도 반드시 POST를 사용해야 한다.)
             ➡ 308(Permanent Redirect, )
             
             ➡ 400(잘못된 문법으로 인하여 서버가 요청을 이해할수 없다는 뜻)
             ➡ 401(HTTP 표준에서는 "미승인"을 명확히 하고있지만, 의미상 이 응답은 비인증을 의미한다, 클라이언트는 요청한 응답을 받기 위해서 인증을 해야한다.)
             ➡ 403(클라이언트가 콘텐츠에 접근할 권리를 가지고 있지않다. stg 서버에 함부로 접근 못하는것과 비슷)
             ➡ 404(Not Found, 요청받은 리소스를 찾을수가 없는 경우, 브라우저에 알려지지 않은 URL을 의미한다. 존재를 숨기기 위해 403대신에 404를 쓸수도 있다.)
             
             ➡ 500(서버에서 어떻게 처리해야할지 방법을 아직 찾지 못한 경우)
             ➡ 501(서버에서 지원되지 않으므로, GET,HEAD를 사용하지 않는 경우 아무것도 반환되지 않는다.)
             ➡ 502(Bad Gateway, 서버가 요청을 처리하는데 필요한 응답을 얻기 위해 게이트웨이로 작업을 하는 동안 잘못된 응답을 수신했음을 의미)
             ➡ 503(Service Unavailable, 서버가 요청을 처리할 준비가 되지않음, 과부하 또는 작동이 중단된 경우)
             ➡ 504(Gateway Timeout, 서버가 게이트웨이 역할을 하고있으며 적시에 응답을 받을 수 없을 때 주어진다.)
             ➡ 505(요청에 사용된 HTTP 버전은 서버에서 지원되지 않는다.)

             ... 등등 너무 많다.
            ・redirect
            ・HTTP Header Fields (Accept, Authorization, Cache-Control, Content-Language, Expires)
            ・Basic인증
             ➡ 브라우저가 표시하는 대화창
             ➡ 브라우저에 따라 디자인은 다르지만 기능은 같음
             ➡ HTTP 규격의 일부로 규정되어 있는 가장 단순한 인증 시스템
            
            ・Digest인증
             ➡ 
            ・HTTP cookie
