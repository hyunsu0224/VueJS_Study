1. 프레임워크(FrameWork)
    많은 소프트웨어에서 사용되는 일반적인 기능을 담은 틀(Frame)로 개발 과정을 보다 빠르고 편리하게 해주는 오픈 소스이다.
    대표적으로 자바스크립트의 프레임워크로는 Angular, Vue 등이 있을수 있다.
    정해진 프로그램 틀에 맞게 사용자가 필요한 기능을 입력함
    -장점   1. 코드의 작성이 효율적이다.(아무것도 없는 백지에서 시작하는 것보다 빠르게 작성이 가능하다.)
            2. 코드의 질적 향상 (이미 검증된 코드를 사용하는 것이기때문에 버그 발생 가능성을 저하시키고, 반복작업에서 일어날 수 있는 실수들을 방지하도록 한다.)
            3. 유지 보수가 안정적이다.(프레임워크를 사용하면 담당자가 바뀌더라도 비교적 코드가 체계적이기 때문에 위험부담을 줄일 수 있다.)
    
    -단점   1. 학습시간이 길다.(다수의 개발자가 수정의 수정을 거치다 보니 코드를 습득하고 활용하는데 까지 시간이 걸릴수 있다.)
            2. 자유롭지 못한 개발 환경(프레임워크 사용시 프레임워크에 의존하고, 프레임워크의 규칙을 따라야하기 때문에 개발자가 자유롭고 유연하게 개발하는 것에는 한계가 있다. 기존 코드를 유지하려고 하면 더 힘들다.)

2. 라이브러리(Library)
    호출하는 개발자가 필요한 기능을 원할때 호출을 함 (React, JQuery)

3. 파싱(Parsing)
    어떤 문장을 구성 성분으로 분해하고 그들 사이의 위계 관계를 분석하여 문장의 구조를 결정하는 것을 의미한다.
    데이터를 조립해 특정한 데이터만을 추출한다는 의미를 내포하고 있다. 큰 자료에서 원하는 자료만 빼와 가공하고 불러오는 것 그리고 이것을 수행하는 프로그램을 파서(Parser)라고 한다.

4. 마스킹(Masking)
    일부분을 가리는(=Mask) 것을 말하는 것이다.
    기호의 열 또는 패턴을 대상으로 해서 그 일부를 추출하거나 삭제하는 것을 뜻한다. 개인정보를 보호하기 위한 하나의 보안과정을 의미하기도 한다.

5. 하드 코딩(Hard Coding)
    데이터를 코드 내부에 직접 넣는 코딩 방식을 뜻한다.
    데이터 처리 속도가 빠르며 직관적이고 가독성이 뛰어난 장점이 있으나 데이터가 코드 내부에 직접 들어가 있기때문에 확장성과 유연성이 떨어져 잘 활용하지 않는다.

6. 동기방식(Sync), 비동기 방식(Async)
    동기방식은 기능에 대한 요청을 보내고 응답을 받아야만 동작이 순차적으로 처리되는 방식
    비동기방식은 요청을 보내는 순서와 상관없이 동작이 처리되는 방식

7. AJAX(Async JavaScript and XML) -> 비동기 방식
    비동기적 자바스크립트와 XML의 약자, 한 웹 페이지를 로딩할 때 페이지의 일부 데이터만을 갱신하는 웹 개발 기법을 뜻한다.
    기존 웹 페이지 로딩 방식은 한 웹사이트 내부에서 페이지를 넘겨 이동할 때마다 다른 웹페이즈를 통째로 불러오기 때문에 시간이 오래 걸린다는 단점이 있다.
    하지만 AJAX는 웹페이지의 기본적인 디자인 틀을 갖춰놓은 뒤 자바스크립트를 통해 웹서버에 필요한 데이터를 요청하고, 디자인 틀 안에서 XML로 이루어진 데이터를 불러와 변경한다.
    즉, 페이지 전체를 로딩할 필요 없이 일부분만을 불러오기 때문에 웹페이지를 처리하는 속도가 빨라지고 코드의 양도 줄어드는 장점이 있다.

/* 개발 실무 용어 */
1. SB(Story Board)
    사이트 제작에 필요한 정보가 들어있는 설계서, 예시 이미지와 함께 구현되어야 할 항목에 대한 자세한 설명들이 적혀있다.

2. WBS(Work Breakdown Structure)
    프로젝트 범위와 일정을 세부적을 나눈 '작업 분할 구조도' 이다.
    프로젝트 목표를 달성하기 위해서 필요한 활동과 업무를 계층으로 분류 및 세분화 하여 전체 범위를 정의한 구조도이다.
    WBS를 활용하면 프로젝트에 필요한 인력과 일정 계획을 세우는데 용이하며, R&R(Role & Responsibilities)를 한눈에 파악하는데 도움이 된다.\

3. 헬스체크(Health Check)
    서버나 네트워크 등이 정상적으로 가동하는지 상태를 확인하는 것을 뜻한다.
    미리 답이 정해진 일정한 규칙을 실행시켜 장애의 유무를 확인하고, 필요시에는 장애 단위를 분리시키기도 한다.

4. 페일 오버(Fail Over) / 페일 백(Fail Back)
    '페일오버'는 서버나 시스템, 네트워크 문제가 발생했을 때 예비 시스템으로 자동 전환되는 기능을 말한다.
    이때 사람이 수동으로 전환하면 '스위치 오버'
    '페일백'은 '페일오버'로 자동 전환된 시스템을 기준 상태로 돌려 놓는 것을 뜻한다.

5. 애즈이즈(AS-IS) / 투비(TO-BE)
    AS-IS는 개선이 되기전의 상태
    TO-BE는 개선된 후의 상태를 뜻한다.

/* 반응형 웹페이지 */
1. 정적 웹 페이지(Static Web Page)
    서버에 미리 저장된 데이터를 그대로 불러오듯 전달하는 웹 페이지.
    서버의 데이터가 바뀌지 않는 한 모든 사용자는 늘 고정된 웹페이지를 받아 본다.
    주로 서비스 소개페이지처럼 내용이 자주 바뀌지 않는 정적 웹 페이지를 이용하는 경우가 많다.

2. 동적 웹 페이지(Dynamic Web Page)
    서버에 저장된 데이터를 그대로 보여주는 것이 아니라 Script를 통해 가공을 거쳐 출력하는 웹페이지
    즉, 사용자의 interction에 따라 같은 페이지더라도 보여지는 화면의 내용은 달라진다.(매번 새롭게 갱신되는 게시판, SNS처럼 게시물 내용이 바뀌는 페이지)

3. 적응형 웹(Adaptive Web Design)
    미리 웹 브라우저가 동작할 기기별로 레이아웃을 여러개 정해놓고 조건에 따라 그 중 하나를 보여주는 웹 디자인 방식

4. 반응형 웹(Responsive Web Design) -> 레이아웃이 바뀌는 것
    적응형 웹과 달리 하나의 레이아웃이 웹 브라우저에 맞춰지는 형태로, 웹 브라우저의 가로폭이 바뀔 때마다 페이지 내에 있는 콘텐츠의 크기와 배치도 자동으로 맞춰진다.(CSS로 수정을 해줘야한다.)

5. 인터렉티브 웹(Interactive Web) -> 상호작용하는 웹 페이지 -> 클릭 스크롤등에 따라 상호작용하는 것
    웹 페이지 내의 콘텐츠가 클릭, 스크롤, 입력 등 사용자의 동작에 따라 상호작용하는 웹 페이지

/* 알고리즘(algorithm) 용어 */
1. 알고리즘
    문제를 해결하기 위해 필요한 계산 절차 프로그래밍 언어를 통해 알고리즘을 프로그램으로 만들어가는 작업을 프로그래밍이라고 한다.

2. 자료 구조(Data Structure)
    데이터를 효과적으로 접근할 수 있도록 만들어진 데이터 체제로, 코드상에서 자료를 저장하는 방법, 자료끼리의 관계 등을 구조적으로 표현하는 방식.
    어떤 자료구조를 쓰느냐에 따라 코드 효율이 달라진다.

3. 디버깅(Debugging)
    디버깅 또는 디버그(Debug) 프로그래밍 과정에서 발생하는 버그를 찾아 바로잡는 작업. 단순히 버그를 없애는 것뿐만 아니라 문제가 발생한 근본적인 원인을 찾아 해결하는 과정이다.

4. 리팩토링(Refactoring)
    이미 완성된 코드의 구조를 개선하는 일, 결과값은 바뀌지 않지만, 코드 내부를 뜯어고쳐 다른 사람이 이해하기 쉽고 간결하게 만드는 해위
    때문에 버그를 고치거나 새로운 기능을 만드는 것은 아니지만, 코드의 생산성을 높이고 유지보수가 쉽게끔 만들어준다.

5. 코딩 컨벤션(Coding Convention)
    지키지 않으면 다른 사람들이 피를 보는 것
    코드를 서로 파악하기 쉽도록 하기 위해서 일관적인 스타일을 유지하게끔 하는 코드 작성 규칙, 띄어쓰기 들여쓰기 등등

6. 기술 부채(Technical Debt)
    불확실한 업무, 촉박한 일정에 맞춰 제한된 방법으로 개발을 진행하면서 문제점이 누적된다는 관점.
    프로젝트에 대해 정리된 문서를 마련하지 못하거나, 조악한 코드로 작업을 계속하게 되거나, 자동화할 수있는 일에 대한 자동화 처리를 해놓지 않는다면 점점 기술 부채가 쌓일 수 있다.
    시간이 지날수록 해결이 까다로워 지는 만큼 기술적으로 빚을 지는 셈이다.
    완전 피하기는 어렵다보니 관리가 가능한 선에서 기술부채를 유지하면서 작업을 하는 것도 하나의 방법이라고 볼 수 있다.

/* 컴파일러 */
컴파일(Compile), 컴파일러(Compiler), 컴파일드 언어(Compiled Language)
컴파일 : 사람이 이해할 수 있는 고급 프로그래밍 언어로 작성한 코드를 컴퓨터가 처리할 수 있는 기계어로 한꺼번에 번역하는 과정
컴파일러 : 이 과정을 위해 쓰이는 프로그램
수정이 까다롭지만 프로그램 실행 속도가 빠르다는 장점이 있다.(C, C++이 대표적인 컴파일러 언어)

/* 인터프리트 */
인터프리트(Interpret), 인터프리터(InterPreter), 인터프리티드 언어(Interpreted Language)
인터프리트 : 컴파일과 달리 프로그램을 실행할 때마다 고급 프로그래밍 언어로 작성된 코드를 한 줄씩 기계어로 번역하는 방식이다.
            한줄 한줄씩 코드를 실행해 내려가기때문에 실행 속도는 느리지만 디버깅은 쉽다.
            JavaScript, JAVA, Python, PHP 등이 인터프리티드 언어에 속한다.


/****** 용어 정리 ******/
* CDC 솔루션(Change Data Capture)
    - 마지막으로 추출한 이후 변경된 데이터만 골라내는 기술
    - 데이터 백업이나 통합 작업을 할 경우 방대한 데이터를 다뤄야 하는데, 원본소스 가운데 최근 변경된 데이터들만 골라 다른 시스템으로 옮기게되면
      시스템 로드도 줄이고 전체적인 작업 생산성을 향상시킬 수 있다.
    - 흔히 CDC 라고 하는 것은 데이터베이스 로그 기반 CDC를 의미한다.

* 개방형 데이터(Open Data)
    - 필요로 하는 이들에게 무료로 공개하는 데이터
    - 주로 정부 기관이나 비영리단체, 교육기관과 일부 사기업 등이 제공한다.

* 칸반 보드(Kanban Board)
    - 소프트웨어 개발 방법론 중 하나
    - todo -in progress -done

* 스크럼(Scrum)
    - 소프트웨어 개발 방법론 중 하나
    - 애자일 개발 프로세스에 해당
    - 특정 기능에 대한 계획 - 개발 - 테스트 - 기능구현 주기(스프린트)를 활용한 방법론

* 물류 PDA(Personal Digital Assistant)
    - 개인 (휴대)정보 단말기, 터치 스크린 방식의 핸드폰처럼 작고 가벼운 컴퓨터
    - 개인정보 입력이나 결제도 가능
    - 요새 사라지는 추세

* DCPM
    - Dynamic CPM
    - CPM : Cost Per Mille, 1천 뷰당 노출비

* DCMS
    - Digital Contents Management System, 디지털 콘텐츠 관리 시스템
    - e북, 오디오북, 동영상북 등 다양한 형태의 디지털 콘텐츠를 하나의 플랫폼에서 서비스 할 수있도록
    - 디지털 콘텐츠의 불법 복제 및 유통을 방지해 저작권을 보호하고 콘텐츠의 표준화된 플랫폼을 구축해 안정적인 통합 서비스 환경을 제공

* EDI
    - Electronic Data Interchange, 전자 데이터 교환
    - 협력사 포털, 협력사끼리 정보 주고받는 시스템

* DW
    - Data Warehouse
    - 분산되어있는 각각의 데이터 베이스 관리 시스템들을 통합하여 관리
    - 중앙 저장소 역할

* SSO
    - Single Sign-On, 통합 인증
    - 한 번의 로그인으로 여러 개의 다른 사이트들도 로그인 없이 이용하는 방법(자동 접속)
    - ex. tistory.com에 로그인 시 naver.com에도 로그인 됨, 그룹웨어 서비스

* SLO
    - Sign LogOn
    - SSO와는 다르게 시스템 각각이 개별 쿠키나 세션을 가지고 인증
    - 계정 정보가 하나의 시스템에 존재하고, 각각의 시스템에는 서로 별도의 인증 부분이 존재
    - ex. mail.naver.com 로그인 시 blog.naver.com에도 로그인이 됨

* EAM
    - Enterprise Access Management
    - 통합 인증, 권한 관리 시스템
    - SSO 시스템에 권한 관리, 자원 관리 등이 포함된 개념

* SMS
    - System Management System, 시스템 관리 시스템
    - 여러 지역에 분산되어 있는 각각의 서버/프로그램을 통합적으로 관리해주는 시스템

* SI
    - System Integration
    - 전산 시스템을 필요로 하는 곳으로부터 하청을 받아, 시스템의 기획/개발/유지보수/운영 등을 대신해주는 업종

* EAI
    - Enterprise Application Integration, 기업 응용 프로그램 통합
    - 기업 내 필요한 여러 어플리케이션있을텐데, 이런 각종 Application 간에 상호 연동이 가능하도록 통합하는 솔루션
    - 통신 프로토콜/ 데이터타입/ OS 등 각기 다른 환경에서 동작하는 Application들에 대해 상호 연동할 수 있는 기능을 제공하는 솔루션
    - 파일, 온라인 서비스, DB 등 각기 다른 데이터를 주기적 혹은 준실시간(Defered Online)으로 처리함
    - 사용하는 이유, 각 시스템별로 비즈니스적으로 다른 처리를 하고 있지만, 각 시스템간에 공통된 영역을 효율적으로 연동하기 위해
    - 규모가 큰 회사일수록 상호 연동함에 있어서 복잡성 보다는 단순화가 좋기에 많이들 사용한다.

* Meta Data
    - 데이터에 대한 데이터
    - 데이터에 관한 구조화된 데이터로, 다른 데이터를 설명해주는 데이터

* PMO
    - Project Management Office, 프로젝트 관리 조직
    - 프로젝트 업무 범위 내에서 프로젝트를 관장하고 조정 관리하는 다양한 책임이 부과된 주체
    - 프로젝트 관리 지원부터 직접 프로젝트를 관리

* MDM
    - Mobile Device Management, 모바일 단말 관리
    - 모바일 기기의 보안을 향상시켜 비즈니스 용도로 사용하기 적합하게 하는 앱

* CIMS
    - Computer Integrated Manufacturing  System, 컴퓨터 통합 생산 시스템
    - 생산에 관련된 모든 활동(설계, 제조, 관리, 판매, 개발, 자재 구매등의 각 부문)을 컴퓨터나 주변 기술을 구사하여 통합함으로써
      필요한 질과 양의 정보를 제시간에 맞추어 생성. 전달하고, 각 부문간의 의사 소통 및 의사 결정을 원할, 신속 그리고 효율적으로 행함으로써
      현 생산 시스템의 업무에 내재하고 있는 과제의 해결을 도모하고, 기업 전체를 탄력성 있고 효율적으로 움직이도록 하는 시스템

* batch (배치)
    - batch processing, 일괄 처리
    - 개별적으로 어떤 요청이 있을 때마다 실시간으로 통신하는 것이 아닌 한꺼번에 일괄적으로 대량 건을 처리
    - batch program : 프로그램을 실행하면 알아서 주기적으로 점검하거나 기타 등등 해주는 프로그램(알약, 서버 정기점검 같은 어플)

* I/F
    - Interface, 인터페이스의 약어

* 어플리케이션 아키텍처(AA)
    - 어플리케이션을 설계하고 구축하는데 사용하는 패턴과 기술을 설명

* API
    - Application Program Interface, 응용프로그램 인터페이스
    - 운영체계나 다른 응용프로그램에게 처리요구를 할 수 있도록 컴퓨터 운영체제나 다른 응용프로그램에 의해 미리 정해진 특별한 메소드/언어/메시지형식

* WAS
    - Web Application Server
    - ex) Tomcat, Resin, Jeus(JSP) / IIS(ASP) / Apache(PHP)
    - 웹서버에 사용자가 요구하는 내용(동적인 내용)을 실행시켜주는 코드를 추가해주는 것

* JSP
    - JavaServer Pages, Java 기반의 웹개발 언어
    - HTML 코드에 Java 코드를 넣어 동적 웹페이지를 생성하는 웹어플리케이션 도구이다.
    - JSP가 실행되면 자바 서블릿(Servlet)으로 변환되며 웹 어플리케이션 서버에서 동작되면서 필요한 기능을 수행하고, 그렇게 생성된 데이터를
      웹페이지와 함께 클라이언트로 응답한다.
    
* PHP
    - 웹개발 언어

* CS 프로그래밍
    - Client & Server 프로그래밍

* Hexagonal architecture (= Port & Adapter architecture)
    - 육각형 안쪽에 도메인과 관련된 비즈니스 로직이 들어가고, 육각형 바깥에 도메인과 상관이 없는 인프라 코드가 들어감
    - Adapter : 외부에서 들어오거나 나가는 요청을 처리하는 부분 (port를 통하기 위해 거쳐야하는 부분)
    - Port : Adapter와 비즈니스 로직에 접근하는 통로(input, output 통로)

* DAO
    - Data Access Object
    - DB에 접근하는 객체

* gRPC
    - 구글에서 만든 RPC
    - RPC : Remote Pro